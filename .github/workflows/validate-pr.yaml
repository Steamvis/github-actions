name: Validate Pull Request Changes
on:
  pull_request:
    types: [opened, synchronize, reopened, milestoned, demilestoned]

# Cancel in-progress jobs for the same PR (pull_request_target event) or for the same branch (push event).
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  check-pr-changes:
    name: Validate Pull Request Changes
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    - run: npm install yaml marked
    - name: Check pr changes
      uses: actions/github-script@v7
      with:
        script: |
          const [owner, repo] = [context.repo.owner, context.repo.repo];
          const pullRequestID = context.issue.number;

          /* ---------------------------------------------------------------------------- */
          const marked = require('marked');
          const YAML = require('yaml');

          /**
          * 
          * @param {string} markdownString 
          * @param {string} header 
          * @returns {string}
          */
          function findSectionInMarkdown(markdownString, header) {
              const tokens = marked.lexer(markdownString);
              const headerIndex = tokens.findIndex( 
                  (token) => token.type === 'heading' && token.text.toLowerCase() === header.toLowerCase()
              );

              if (headerIndex === -1) return null;

              let result;
              for (let i = headerIndex + 1; i < tokens.length; i++) {
                  if (tokens[i].lang === 'changes') {
                      result = tokens[i].text;
                      break;
                  }
              }
              
              return result;
          }

          /**
          *
          * @param {string} owner
          * @param {string} repo
          * @param {number} pullRequestID
          */
          async function getPullRequestBody(owner, repo, pullRequestID) {
            try {
              const { data } = await github.rest.pulls.get({
                owner,
                repo,
                pullRequestID,
              });

              console.log(data)

              return data[0].body;
            } catch (error) {
              core.error(error);
            }
          }

          const prBody = await getPullRequestBody(owner, repo, pullRequestID);
          const changelogEntries = findSectionInMarkdown(prBody, 'Changelog entries');

          /**
          *
          * @param {object} block
          * @param {number} index
          * @returns
          */
          function validateYaml(block, index) {
            if (
              block.section === undefined ||
              block.section === null ||
              block.section.length === 0 ||
              block.section === '<kebab-case of a module name> | <1st level dir in the repo>'
            ) {
              throw new Error(`'section' is required and must be a non-empty string in block ${index}`);
            }

            if (
              block.type === undefined ||
              block.type === null ||
              block.type.length === 0 ||
              !['fix', 'feature', 'chore'].includes(block.type)
            ) {
              throw new Error(`'type' must be one of type: fix, feature, chore. In block ${index}`);
            }

            if (
              block.summary === undefined ||
              block.summary === null ||
              block.summary.length === 0 ||
              block.summary === '<ONE-LINE of what effectively changes for a user>'
            ) {
              throw new Error(`'summary' is required and must be a non-empty string in block ${index}`);
            }

            if (
              typeof block.impact === 'string' &&
              block.impact.length > 0 &&
              block.impact === '<what to expect for users, possibly MULTI-LINE>, required if impact_level is high â†“'
            ) {
              throw new Error(`'impact' is required and must be a non-empty string in block ${index}`);
            }

            if (block.impact_level.length > 0 && !['default', 'high', 'low'].includes(block.impact_level)) {
              throw new Error(`'impact_level' must be one of levels: default, high, low. In block ${index}`);
            }

            return true;
          }

          let changesBlocks = changelogEntries.split('---');
          try {
            changesBlocks.forEach((changeBlock, idx) => validateYaml(YAML.parse(changeBlock.trim()), idx + 1));
            core.info("Changes is valid");
          } catch (error) {
            core.error(error);
          }
